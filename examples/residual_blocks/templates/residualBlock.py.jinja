import torch
import torch.nn as nn
class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels, identity_downsample=None, stride=1):
        super(ResidualBlock, self).__init__()

        self.expansion = 4
        {% for layer in layers %}
        self.{{ layer.name }} = nn.{{ layer.type }}(
            {% for param in layer.params -%}
            {{ param }}={{ layer.params[param] }},
            {%- endfor %}
        )
        {% endfor %}

        self.identity_downsample = identity_downsample

    def forward(self, x):
        identity = x

        {% for layer in layers %}
        x = self.{{ layer.name }}(x)
        {% endfor %}

        if self.identity_downsample is not None:
            identity = self.identity_downsample(identity)

        x += identity

        return x
